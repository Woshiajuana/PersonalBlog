{
  "compilerOptions": {
    /* Visit https://aka.ms/tsconfig.json to read more about this file */

    /* Basic Options */
    // "incremental": true,                         /* Enable incremental compilation */
    "target": "es5",                                /* 用于指定编译之后的版本目标: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019', 'ES2020', 'ES2021', or 'ESNEXT'. */
    "module": "commonjs",                           /* 用来指定要使用的模块标准: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', 'es2020', or 'ESNext'. */
    // "lib": [],                                   /* 用于指定要包含在编译中的库文件，如果使用了ES6的新语法，就需要在这里引入对应的ES6库文件. */
    // "allowJs": true,                             /* 设置的值为true或者false，指定是否允许编译JS文件，默认是false，即不编译JS文件. */
    // "checkJs": true,                             /* 用来指定是否检查和报告JS文件中的错误，默认是false. */
    // "jsx": "preserve",                           /* 指定jsx代码用于的开发环境: 'preserve', 'react-native', 'react', 'react-jsx' or 'react-jsxdev'. */
    // "declaration": true,                         /* 用来指定是否在编译的时候生成对应的声明文件 '.d.ts' . */
    // "declarationMap": true,                      /* 指定是否为声明文件 '.d.ts' 生成map文件. */
    // "sourceMap": true,                           /* 指定编译时是否生成 '.map' 文件. */
    // "outFile": "./",                             /* 指定将输出文件合并为一个文件，他的值为一个路径名，比如设置 ./dst/main.js . 但是要注意，只要设置 module 的值为 amd 和 system 模块时才支持这个配置 */
    // "outDir": "./",                              /* 指定编译输出文件夹. */
    // "rootDir": "./",                             /* 指定编译文件的根目录，编译器会在根目录查找入口文件. */
    // "composite": true,                           /* 是否编译构建应用项目 */
    // "tsBuildInfoFile": "./",                     /*  */
    // "removeComments": true,                      /* 指定是否将编译后的文件中的注释删掉. */
    // "noEmit": true,                              /* 不生成编译文件，一般很少用. */
    // "importHelpers": true,                       /* 指定是否映入tslib里的辅助工具函数，默认false. */
    // "downlevelIteration": true,                  /* 当 target 为 'ES5' 或 'ES3' 时，为 for-of / spread / destructuring 中的迭代器提供完全支持. */
    // "isolatedModules": true,                     /* 指定是否将每个文件作为单独的模块，默认为true. */

    /* Strict Type-Checking Options */
    "strict": true,                                 /* 用于指定是否启动所有类型检查. */
    // "noImplicitAny": true,                       /* 如果没有明确一些值的类型，编译器默认其为any. */
    // "strictNullChecks": true,                    /* 设置成 true, null 和 undefined . */
    // "strictFunctionTypes": true,                 /* 用来指定是否使用函数参数双向协变检查。. */
    // "strictBindCallApply": true,                 /* 设置true 会对bind call apply 绑定方法的参数检测是严格检测的. */
    // "strictPropertyInitialization": true,        /* 设为true 会检查类的非 undefined 属性是否已经在构造函数里初始化了，如果开启这项，则需要同时开启 strictNullChecks, 默认为false. */
    // "noImplicitThis": true,                      /* 当 this 表达式的值为 any 类型的时候，生成一个错误. */
    // "alwaysStrict": true,                        /* 设置true 指始终以严格模式检查每个模块. */

    /* Additional Checks */
    // "noUnusedLocals": true,                      /* 检查是否定义了但没有使用的变量. */
    // "noUnusedParameters": true,                  /* 检查函数体中没有使用的参数. */
    // "noImplicitReturns": true,                   /* 检查函数是否返回值. */
    // "noFallthroughCasesInSwitch": true,          /* 检查 switch 中是否油 case 没有使用 break 跳出. */
    // "noUncheckedIndexedAccess": true,            /* Include 'undefined' in index signature results */
    // "noImplicitOverride": true,                  /* Ensure overriding members in derived classes are marked with an 'override' modifier. */
    // "noPropertyAccessFromIndexSignature": true,  /* Require undeclared properties from index signatures to use element accesses. */

    /* Module Resolution Options */
    // "moduleResolution": "node",                  /* 选择模块解析策略: 'node' (Node.js) or 'classic' (TypeScript pre-1.6). */
    // "baseUrl": "./",                             /* 用于设置解析非相对模块名称的基本目录，相对模块不会受baseUrl影响. */
    // "paths": {},                                 /* 用于设置模块名到基于baseUrl的路径映射. */
    // "rootDirs": [],                              /* 可以指定一个路径列表，在构建时编译器会将这个路径列表中的路径中的内容都放到一个文件夹中. */
    // "typeRoots": [],                             /* 用来指定声明文件或文件夹的路径列表，如果指定了此项，则只有在这里列出的声明文件才会被加载. */
    // "types": [],                                 /* 用来指定需要包含的模块，只有在这里列出的模块的声明文件才会被加载进来. */
    // "allowSyntheticDefaultImports": true,        /* 用来指定允许从没有默认导出的模块中默认导入. */
    "esModuleInterop": true,                        /* 通过为导入内容创建命名空间，实现CommonJS和ES模块之间的互操作性. */
    // "preserveSymlinks": true,                    /* 不把符号链接解析为其真实路径，具体可以了解下webpack和nodejs的symlink相关知识. */
    // "allowUmdGlobalAccess": true,                /* Allow accessing UMD globals from modules. */

    /* Source Map Options */
    // "sourceRoot": "",                            /* 用于指定调试器应该找到TypeScript文件而不是源文件位置，这个值会被写进，map文件里. */
    // "mapRoot": "",                               /* 用于指定调试器找到映射文件而非生成文件的位置，指定map文件的根路径，该选项会影响. */
    // "inlineSourceMap": true,                     /* 指定是否将map文件的内容和js文件编译在一个同一个js文件中. */
    // "inlineSources": true,                       /* 用于指定是否进一步将，ts文件的内容也包含到输出文件中. */

    /* Experimental Options */
    // "experimentalDecorators": true,              /* 用于指定是否启用实验性的装饰器特性. */
    // "emitDecoratorMetadata": true,               /* 用于指定是否为装饰器提供元数据支持. */

    /* Advanced Options */
    "skipLibCheck": true,                           /* Skip type checking of declaration files. */
    "forceConsistentCasingInFileNames": true        /* Disallow inconsistently-cased references to the same file. */
  },
//  "files": [] // 可以配置一个数组列表，里面包含指定文件的相对或绝对路径，编译器在编译的时候只会编译包含在files中列出的文件。如果不指定，则取决于有没有设置 include 选项，如果没有 include 选项，则默认编译根目录以及所有子目录中的文件。这里列出的路径必须是指定文件，而不是文件夹且不支持通配符。
//    "include": [] // 可以指定要编译的路径列表，但是和files的区别在于，这里的路径可以是文件夹，也可以是文件，可以使用相对和绝对路径，而且可以使用通配符
//    "exclude": [] // exclude表示要排除的、不编译的文件、他也可以指定一个列表，规则和include一样，可以是文件可以是文件夹、可以是相对路径或绝对路径，以使用通配符
//    "extends": "" // 可以通过指定一个其他的tsconfig,json文件路径，来继承这个配置文件里的配置，继承来的文件的配置会覆盖当前文件定义的配置。TS在3.2版本开始，支持继承一个来自 Node.js 包的 tsconfig.json 配置文件。
//    "compileOnSave": true // 在我们编辑了项目中文件保存的时候，编辑器会根据tsconfig,json的配置重新生成文件，不过这个需要编辑器支持
//    "references": [] // 一个对象数组，指定要引用的项目
}
